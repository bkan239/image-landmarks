/*
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.Media;
import io.swagger.client.model.MediaUpload;
import io.swagger.client.model.MediaUploadResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaApi {
    private ApiClient apiClient;

    public MediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v2MediaFilePost
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param file a media file to upload (required)
     * @param detectionFlags (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)
     * @param detectionMinScore (optional) filter faces with detection score lower than min_score. (optional)
     * @param detectionNewFaces (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)
     * @param setPersonId (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)
     * @param recognizeTargets (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)
     * @param recognizeParameters (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)
     * @param originalFilename (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2MediaFilePostCall(UUID apiKey, File file, String detectionFlags, Double detectionMinScore, String detectionNewFaces, String setPersonId, String recognizeTargets, String recognizeParameters, String originalFilename, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/media/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (apiKey != null)
        localVarFormParams.put("api_key", apiKey);
        if (file != null)
        localVarFormParams.put("file", file);
        if (detectionFlags != null)
        localVarFormParams.put("detection_flags", detectionFlags);
        if (detectionMinScore != null)
        localVarFormParams.put("detection_min_score", detectionMinScore);
        if (detectionNewFaces != null)
        localVarFormParams.put("detection_new_faces", detectionNewFaces);
        if (setPersonId != null)
        localVarFormParams.put("set_person_id", setPersonId);
        if (recognizeTargets != null)
        localVarFormParams.put("recognize_targets", recognizeTargets);
        if (recognizeParameters != null)
        localVarFormParams.put("recognize_parameters", recognizeParameters);
        if (originalFilename != null)
        localVarFormParams.put("original_filename", originalFilename);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2MediaFilePostValidateBeforeCall(UUID apiKey, File file, String detectionFlags, Double detectionMinScore, String detectionNewFaces, String setPersonId, String recognizeTargets, String recognizeParameters, String originalFilename, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling v2MediaFilePost(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling v2MediaFilePost(Async)");
        }
        

        com.squareup.okhttp.Call call = v2MediaFilePostCall(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media file using multipart/form-data
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param file a media file to upload (required)
     * @param detectionFlags (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)
     * @param detectionMinScore (optional) filter faces with detection score lower than min_score. (optional)
     * @param detectionNewFaces (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)
     * @param setPersonId (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)
     * @param recognizeTargets (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)
     * @param recognizeParameters (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)
     * @param originalFilename (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)
     * @return MediaUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MediaUploadResponse v2MediaFilePost(UUID apiKey, File file, String detectionFlags, Double detectionMinScore, String detectionNewFaces, String setPersonId, String recognizeTargets, String recognizeParameters, String originalFilename) throws ApiException {
        ApiResponse<MediaUploadResponse> resp = v2MediaFilePostWithHttpInfo(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename);
        return resp.getData();
    }

    /**
     * upload media file using multipart/form-data
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param file a media file to upload (required)
     * @param detectionFlags (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)
     * @param detectionMinScore (optional) filter faces with detection score lower than min_score. (optional)
     * @param detectionNewFaces (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)
     * @param setPersonId (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)
     * @param recognizeTargets (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)
     * @param recognizeParameters (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)
     * @param originalFilename (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)
     * @return ApiResponse&lt;MediaUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MediaUploadResponse> v2MediaFilePostWithHttpInfo(UUID apiKey, File file, String detectionFlags, Double detectionMinScore, String detectionNewFaces, String setPersonId, String recognizeTargets, String recognizeParameters, String originalFilename) throws ApiException {
        com.squareup.okhttp.Call call = v2MediaFilePostValidateBeforeCall(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, null, null);
        Type localVarReturnType = new TypeToken<MediaUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media file using multipart/form-data (asynchronously)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param file a media file to upload (required)
     * @param detectionFlags (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)
     * @param detectionMinScore (optional) filter faces with detection score lower than min_score. (optional)
     * @param detectionNewFaces (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)
     * @param setPersonId (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)
     * @param recognizeTargets (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)
     * @param recognizeParameters (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)
     * @param originalFilename (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2MediaFilePostAsync(UUID apiKey, File file, String detectionFlags, Double detectionMinScore, String detectionNewFaces, String setPersonId, String recognizeTargets, String recognizeParameters, String originalFilename, final ApiCallback<MediaUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2MediaFilePostValidateBeforeCall(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MediaUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2MediaGet
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param mediaUuid the requested media identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2MediaGetCall(UUID apiKey, UUID mediaUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (mediaUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("media_uuid", mediaUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2MediaGetValidateBeforeCall(UUID apiKey, UUID mediaUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling v2MediaGet(Async)");
        }
        
        // verify the required parameter 'mediaUuid' is set
        if (mediaUuid == null) {
            throw new ApiException("Missing the required parameter 'mediaUuid' when calling v2MediaGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2MediaGetCall(apiKey, mediaUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * gets a media information.
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param mediaUuid the requested media identifier. (required)
     * @return Media
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Media v2MediaGet(UUID apiKey, UUID mediaUuid) throws ApiException {
        ApiResponse<Media> resp = v2MediaGetWithHttpInfo(apiKey, mediaUuid);
        return resp.getData();
    }

    /**
     * gets a media information.
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param mediaUuid the requested media identifier. (required)
     * @return ApiResponse&lt;Media&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Media> v2MediaGetWithHttpInfo(UUID apiKey, UUID mediaUuid) throws ApiException {
        com.squareup.okhttp.Call call = v2MediaGetValidateBeforeCall(apiKey, mediaUuid, null, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * gets a media information. (asynchronously)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param mediaUuid the requested media identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2MediaGetAsync(UUID apiKey, UUID mediaUuid, final ApiCallback<Media> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2MediaGetValidateBeforeCall(apiKey, mediaUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2MediaHashGet
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param checksum SHA256 media file hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2MediaHashGetCall(UUID apiKey, String checksum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/media/hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (checksum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("checksum", checksum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2MediaHashGetValidateBeforeCall(UUID apiKey, String checksum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling v2MediaHashGet(Async)");
        }
        
        // verify the required parameter 'checksum' is set
        if (checksum == null) {
            throw new ApiException("Missing the required parameter 'checksum' when calling v2MediaHashGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2MediaHashGetCall(apiKey, checksum, progressListener, progressRequestListener);
        return call;

    }

    /**
     * gets a media information using SHA256 hash of media file.
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param checksum SHA256 media file hash. (required)
     * @return Media
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Media v2MediaHashGet(UUID apiKey, String checksum) throws ApiException {
        ApiResponse<Media> resp = v2MediaHashGetWithHttpInfo(apiKey, checksum);
        return resp.getData();
    }

    /**
     * gets a media information using SHA256 hash of media file.
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param checksum SHA256 media file hash. (required)
     * @return ApiResponse&lt;Media&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Media> v2MediaHashGetWithHttpInfo(UUID apiKey, String checksum) throws ApiException {
        com.squareup.okhttp.Call call = v2MediaHashGetValidateBeforeCall(apiKey, checksum, null, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * gets a media information using SHA256 hash of media file. (asynchronously)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param checksum SHA256 media file hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2MediaHashGetAsync(UUID apiKey, String checksum, final ApiCallback<Media> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2MediaHashGetValidateBeforeCall(apiKey, checksum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2MediaPost
     * @param body request json body with parameters. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2MediaPostCall(MediaUpload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2MediaPostValidateBeforeCall(MediaUpload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = v2MediaPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media file using file uri or file content as base64 encoded string
     * 
     * @param body request json body with parameters. (optional)
     * @return MediaUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MediaUploadResponse v2MediaPost(MediaUpload body) throws ApiException {
        ApiResponse<MediaUploadResponse> resp = v2MediaPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * upload media file using file uri or file content as base64 encoded string
     * 
     * @param body request json body with parameters. (optional)
     * @return ApiResponse&lt;MediaUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MediaUploadResponse> v2MediaPostWithHttpInfo(MediaUpload body) throws ApiException {
        com.squareup.okhttp.Call call = v2MediaPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MediaUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media file using file uri or file content as base64 encoded string (asynchronously)
     * 
     * @param body request json body with parameters. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2MediaPostAsync(MediaUpload body, final ApiCallback<MediaUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2MediaPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MediaUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
