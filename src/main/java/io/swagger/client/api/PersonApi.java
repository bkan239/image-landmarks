/*
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Person;
import io.swagger.client.model.SetPerson;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
    private ApiClient apiClient;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v2PersonGet
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param apiSecret your API secret. It is not recommended to expose your application secret at client side. (required)
     * @param personId (optional) query parameters array of specific person ids or all@namespace to list persons in that namespace (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2PersonGetCall(UUID apiKey, UUID apiSecret, List<String> personId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (apiSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_secret", apiSecret));
        if (personId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "person_id", personId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2PersonGetValidateBeforeCall(UUID apiKey, UUID apiSecret, List<String> personId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling v2PersonGet(Async)");
        }
        
        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling v2PersonGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2PersonGetCall(apiKey, apiSecret, personId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * lists all persons and their faces identifiers sorted by namespace and person name alphabetically. (Administrative endpoint - API secret required)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param apiSecret your API secret. It is not recommended to expose your application secret at client side. (required)
     * @param personId (optional) query parameters array of specific person ids or all@namespace to list persons in that namespace (optional)
     * @return List&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Person> v2PersonGet(UUID apiKey, UUID apiSecret, List<String> personId) throws ApiException {
        ApiResponse<List<Person>> resp = v2PersonGetWithHttpInfo(apiKey, apiSecret, personId);
        return resp.getData();
    }

    /**
     * lists all persons and their faces identifiers sorted by namespace and person name alphabetically. (Administrative endpoint - API secret required)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param apiSecret your API secret. It is not recommended to expose your application secret at client side. (required)
     * @param personId (optional) query parameters array of specific person ids or all@namespace to list persons in that namespace (optional)
     * @return ApiResponse&lt;List&lt;Person&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Person>> v2PersonGetWithHttpInfo(UUID apiKey, UUID apiSecret, List<String> personId) throws ApiException {
        com.squareup.okhttp.Call call = v2PersonGetValidateBeforeCall(apiKey, apiSecret, personId, null, null);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * lists all persons and their faces identifiers sorted by namespace and person name alphabetically. (Administrative endpoint - API secret required) (asynchronously)
     * 
     * @param apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
     * @param apiSecret your API secret. It is not recommended to expose your application secret at client side. (required)
     * @param personId (optional) query parameters array of specific person ids or all@namespace to list persons in that namespace (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2PersonGetAsync(UUID apiKey, UUID apiSecret, List<String> personId, final ApiCallback<List<Person>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2PersonGetValidateBeforeCall(apiKey, apiSecret, personId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2PersonPost
     * @param body request json body with parameters. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2PersonPostCall(SetPerson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2PersonPostValidateBeforeCall(SetPerson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = v2PersonPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * sets or overwrites person id for each specified face.
     * 
     * @param body request json body with parameters. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2PersonPost(SetPerson body) throws ApiException {
        v2PersonPostWithHttpInfo(body);
    }

    /**
     * sets or overwrites person id for each specified face.
     * 
     * @param body request json body with parameters. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2PersonPostWithHttpInfo(SetPerson body) throws ApiException {
        com.squareup.okhttp.Call call = v2PersonPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * sets or overwrites person id for each specified face. (asynchronously)
     * 
     * @param body request json body with parameters. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2PersonPostAsync(SetPerson body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2PersonPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
