/*
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * represents a media file upload message multipart/form-data parameters.
 */
@ApiModel(description = "represents a media file upload message multipart/form-data parameters.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-02T11:12:16.872Z")
public class MediaUploadFile {
  @SerializedName("api_key")
  private UUID apiKey = null;

  @SerializedName("detection_flags")
  private String detectionFlags = null;

  @SerializedName("detection_min_score")
  private Double detectionMinScore = null;

  @SerializedName("detection_new_faces")
  private String detectionNewFaces = null;

  @SerializedName("set_person_id")
  private String setPersonId = null;

  @SerializedName("recognize_targets")
  private String recognizeTargets = null;

  @SerializedName("recognize_parameters")
  private String recognizeParameters = null;

  @SerializedName("original_filename")
  private String originalFilename = null;

  public MediaUploadFile apiKey(UUID apiKey) {
    this.apiKey = apiKey;
    return this;
  }

   /**
   * your API key or d45fd466-51e2-4701-8da8-04351c872236
   * @return apiKey
  **/
  @ApiModelProperty(required = true, value = "your API key or d45fd466-51e2-4701-8da8-04351c872236")
  public UUID getApiKey() {
    return apiKey;
  }

  public void setApiKey(UUID apiKey) {
    this.apiKey = apiKey;
  }

  public MediaUploadFile detectionFlags(String detectionFlags) {
    this.detectionFlags = detectionFlags;
    return this;
  }

   /**
   * (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot;
   * @return detectionFlags
  **/
  @ApiModelProperty(value = "(optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"")
  public String getDetectionFlags() {
    return detectionFlags;
  }

  public void setDetectionFlags(String detectionFlags) {
    this.detectionFlags = detectionFlags;
  }

  public MediaUploadFile detectionMinScore(Double detectionMinScore) {
    this.detectionMinScore = detectionMinScore;
    return this;
  }

   /**
   * (optional) filter faces with detection score lower than min_score.
   * @return detectionMinScore
  **/
  @ApiModelProperty(value = "(optional) filter faces with detection score lower than min_score.")
  public Double getDetectionMinScore() {
    return detectionMinScore;
  }

  public void setDetectionMinScore(Double detectionMinScore) {
    this.detectionMinScore = detectionMinScore;
  }

  public MediaUploadFile detectionNewFaces(String detectionNewFaces) {
    this.detectionNewFaces = detectionNewFaces;
    return this;
  }

   /**
   * (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;}
   * @return detectionNewFaces
  **/
  @ApiModelProperty(value = "(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"angle\": 0, \"points\": [ { \"x\": 0, \"y\": 0, \"type\": 0 }, { \"x\": 0, \"y\": 0, \"type\": 0 }], \"tags\": [ { \"name\": \"\",  \"value\": \"\",  \"confidence\": 1.0 }, {\"name\": \"\", \"value\": \"\", \"confidence\": 1.0 } ], \"set_person_id\": \"\"}")
  public String getDetectionNewFaces() {
    return detectionNewFaces;
  }

  public void setDetectionNewFaces(String detectionNewFaces) {
    this.detectionNewFaces = detectionNewFaces;
  }

  public MediaUploadFile setPersonId(String setPersonId) {
    this.setPersonId = setPersonId;
    return this;
  }

   /**
   * (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot;
   * @return setPersonId
  **/
  @ApiModelProperty(value = "(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \"John Doe@mynamespace\"")
  public String getSetPersonId() {
    return setPersonId;
  }

  public void setSetPersonId(String setPersonId) {
    this.setPersonId = setPersonId;
  }

  public MediaUploadFile recognizeTargets(String recognizeTargets) {
    this.recognizeTargets = recognizeTargets;
    return this;
  }

   /**
   * (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot;
   * @return recognizeTargets
  **/
  @ApiModelProperty(value = "(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \"all@mynamespace,John Doe@othernamespace\"")
  public String getRecognizeTargets() {
    return recognizeTargets;
  }

  public void setRecognizeTargets(String recognizeTargets) {
    this.recognizeTargets = recognizeTargets;
  }

  public MediaUploadFile recognizeParameters(String recognizeParameters) {
    this.recognizeParameters = recognizeParameters;
    return this;
  }

   /**
   * (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot;
   * @return recognizeParameters
  **/
  @ApiModelProperty(value = "(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"")
  public String getRecognizeParameters() {
    return recognizeParameters;
  }

  public void setRecognizeParameters(String recognizeParameters) {
    this.recognizeParameters = recognizeParameters;
  }

  public MediaUploadFile originalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
    return this;
  }

   /**
   * (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.
   * @return originalFilename
  **/
  @ApiModelProperty(value = "(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.")
  public String getOriginalFilename() {
    return originalFilename;
  }

  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaUploadFile mediaUploadFile = (MediaUploadFile) o;
    return Objects.equals(this.apiKey, mediaUploadFile.apiKey) &&
        Objects.equals(this.detectionFlags, mediaUploadFile.detectionFlags) &&
        Objects.equals(this.detectionMinScore, mediaUploadFile.detectionMinScore) &&
        Objects.equals(this.detectionNewFaces, mediaUploadFile.detectionNewFaces) &&
        Objects.equals(this.setPersonId, mediaUploadFile.setPersonId) &&
        Objects.equals(this.recognizeTargets, mediaUploadFile.recognizeTargets) &&
        Objects.equals(this.recognizeParameters, mediaUploadFile.recognizeParameters) &&
        Objects.equals(this.originalFilename, mediaUploadFile.originalFilename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaUploadFile {\n");
    
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    detectionFlags: ").append(toIndentedString(detectionFlags)).append("\n");
    sb.append("    detectionMinScore: ").append(toIndentedString(detectionMinScore)).append("\n");
    sb.append("    detectionNewFaces: ").append(toIndentedString(detectionNewFaces)).append("\n");
    sb.append("    setPersonId: ").append(toIndentedString(setPersonId)).append("\n");
    sb.append("    recognizeTargets: ").append(toIndentedString(recognizeTargets)).append("\n");
    sb.append("    recognizeParameters: ").append(toIndentedString(recognizeParameters)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

