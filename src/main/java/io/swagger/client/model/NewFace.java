/*
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Point;
import io.swagger.client.model.Tag;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * represents a manually labelled face information. face bounding box will be estimated if not provided. minimum 3 points (eyes, mouth) are required.
 */
@ApiModel(description = "represents a manually labelled face information. face bounding box will be estimated if not provided. minimum 3 points (eyes, mouth) are required.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-02T11:12:16.872Z")
public class NewFace {
  @SerializedName("x")
  private Double x = null;

  @SerializedName("y")
  private Double y = null;

  @SerializedName("width")
  private Double width = null;

  @SerializedName("height")
  private Double height = null;

  @SerializedName("angle")
  private Double angle = null;

  @SerializedName("points")
  private List<Point> points = new ArrayList<Point>();

  @SerializedName("tags")
  private List<Tag> tags = null;

  @SerializedName("set_person_id")
  private String setPersonId = null;

  public NewFace x(Double x) {
    this.x = x;
    return this;
  }

   /**
   * x coordinate of the face bounding box center in pixels.
   * @return x
  **/
  @ApiModelProperty(value = "x coordinate of the face bounding box center in pixels.")
  public Double getX() {
    return x;
  }

  public void setX(Double x) {
    this.x = x;
  }

  public NewFace y(Double y) {
    this.y = y;
    return this;
  }

   /**
   * y coordinate of the face bounding box center in pixels.
   * @return y
  **/
  @ApiModelProperty(value = "y coordinate of the face bounding box center in pixels.")
  public Double getY() {
    return y;
  }

  public void setY(Double y) {
    this.y = y;
  }

  public NewFace width(Double width) {
    this.width = width;
    return this;
  }

   /**
   * width of the face bounding box center in pixels.
   * @return width
  **/
  @ApiModelProperty(value = "width of the face bounding box center in pixels.")
  public Double getWidth() {
    return width;
  }

  public void setWidth(Double width) {
    this.width = width;
  }

  public NewFace height(Double height) {
    this.height = height;
    return this;
  }

   /**
   * height of the face bounding box center in pixels.
   * @return height
  **/
  @ApiModelProperty(value = "height of the face bounding box center in pixels.")
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }

  public NewFace angle(Double angle) {
    this.angle = angle;
    return this;
  }

   /**
   * in-plane rotation (roll) of the face bounding box center in degrees.
   * @return angle
  **/
  @ApiModelProperty(value = "in-plane rotation (roll) of the face bounding box center in degrees.")
  public Double getAngle() {
    return angle;
  }

  public void setAngle(Double angle) {
    this.angle = angle;
  }

  public NewFace points(List<Point> points) {
    this.points = points;
    return this;
  }

  public NewFace addPointsItem(Point pointsItem) {
    this.points.add(pointsItem);
    return this;
  }

   /**
   * face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.
   * @return points
  **/
  @ApiModelProperty(required = true, value = "face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.")
  public List<Point> getPoints() {
    return points;
  }

  public void setPoints(List<Point> points) {
    this.points = points;
  }

  public NewFace tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public NewFace addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * (optional) face tags or labels to set manually.
   * @return tags
  **/
  @ApiModelProperty(value = "(optional) face tags or labels to set manually.")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public NewFace setPersonId(String setPersonId) {
    this.setPersonId = setPersonId;
    return this;
  }

   /**
   * (optional) manually assign person id in format name@namespace.
   * @return setPersonId
  **/
  @ApiModelProperty(value = "(optional) manually assign person id in format name@namespace.")
  public String getSetPersonId() {
    return setPersonId;
  }

  public void setSetPersonId(String setPersonId) {
    this.setPersonId = setPersonId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewFace newFace = (NewFace) o;
    return Objects.equals(this.x, newFace.x) &&
        Objects.equals(this.y, newFace.y) &&
        Objects.equals(this.width, newFace.width) &&
        Objects.equals(this.height, newFace.height) &&
        Objects.equals(this.angle, newFace.angle) &&
        Objects.equals(this.points, newFace.points) &&
        Objects.equals(this.tags, newFace.tags) &&
        Objects.equals(this.setPersonId, newFace.setPersonId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(x, y, width, height, angle, points, tags, setPersonId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewFace {\n");
    
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    setPersonId: ").append(toIndentedString(setPersonId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

