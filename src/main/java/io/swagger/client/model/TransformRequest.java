/*
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * represents a recognition request for one or more faces.
 */
@ApiModel(description = "represents a recognition request for one or more faces.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-02T11:12:16.872Z")
public class TransformRequest {
  @SerializedName("api_key")
  private UUID apiKey = null;

  @SerializedName("faces_uuids")
  private List<UUID> facesUuids = new ArrayList<UUID>();

  @SerializedName("action")
  private Integer action = null;

  @SerializedName("parameters")
  private String parameters = null;

  public TransformRequest apiKey(UUID apiKey) {
    this.apiKey = apiKey;
    return this;
  }

   /**
   * your API key or d45fd466-51e2-4701-8da8-04351c872236
   * @return apiKey
  **/
  @ApiModelProperty(required = true, value = "your API key or d45fd466-51e2-4701-8da8-04351c872236")
  public UUID getApiKey() {
    return apiKey;
  }

  public void setApiKey(UUID apiKey) {
    this.apiKey = apiKey;
  }

  public TransformRequest facesUuids(List<UUID> facesUuids) {
    this.facesUuids = facesUuids;
    return this;
  }

  public TransformRequest addFacesUuidsItem(UUID facesUuidsItem) {
    this.facesUuids.add(facesUuidsItem);
    return this;
  }

   /**
   * list of face unique identifiers that should be transformed.
   * @return facesUuids
  **/
  @ApiModelProperty(required = true, value = "list of face unique identifiers that should be transformed.")
  public List<UUID> getFacesUuids() {
    return facesUuids;
  }

  public void setFacesUuids(List<UUID> facesUuids) {
    this.facesUuids = facesUuids;
  }

  public TransformRequest action(Integer action) {
    this.action = action;
    return this;
  }

   /**
   * transform action, currently supported action 0 (average faces)
   * @return action
  **/
  @ApiModelProperty(required = true, value = "transform action, currently supported action 0 (average faces)")
  public Integer getAction() {
    return action;
  }

  public void setAction(Integer action) {
    this.action = action;
  }

  public TransformRequest parameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

   /**
   * (optional) transform action parameters
   * @return parameters
  **/
  @ApiModelProperty(value = "(optional) transform action parameters")
  public String getParameters() {
    return parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformRequest transformRequest = (TransformRequest) o;
    return Objects.equals(this.apiKey, transformRequest.apiKey) &&
        Objects.equals(this.facesUuids, transformRequest.facesUuids) &&
        Objects.equals(this.action, transformRequest.action) &&
        Objects.equals(this.parameters, transformRequest.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, facesUuids, action, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformRequest {\n");
    
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    facesUuids: ").append(toIndentedString(facesUuids)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

